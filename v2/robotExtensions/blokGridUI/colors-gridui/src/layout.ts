// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://gridui.robotikabrno.cz/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":63201,"type":"Led","state":{"id":"Led","x":1.5,"y":0,"w":9.5,"h":8.5,"tab":0,"css":{},"color":"#FF0000","on":false}},{"uuid":22969,"type":"Slider","state":{"id":"SetColor","x":1,"y":12.5,"w":10,"h":1.5,"tab":0,"css":{},"color":"#008000","fontSize":16,"min":0,"max":360,"value":0,"precision":1,"showValue":false}},{"uuid":45250,"type":"Text","state":{"id":"Text2","x":4,"y":12,"w":4,"h":1,"tab":0,"css":{},"text":"Barva","fontSize":17,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":19354,"type":"Text","state":{"id":"Text","x":3.5,"y":9,"w":5,"h":2,"tab":0,"css":{},"text":"","fontSize":16,"color":"#000000","background":"","align":"center","valign":"center","prefix":"","suffix":""}}]}

// Add this as a file layout.ts to your project.
//
// Inicialization:
//
//   import Layout from "./layout.js"
//
//   Layout.begin("Owner name", "Device Name", builder => {
//
//     // Add calback handlers here, like this:
//     builder.Button1.onPress(btn => {
//         console.log("press")
//     })
//
//   })
//
// Usage later in code:
//
//   Layout.Button1.color = "red";
//   console.log(Layout.Button1.pressed)
//

import * as gridui from "gridui"

if(gridui.version() < 0x040000) {
    throw new Error("Your RBGridUi library version is too low for this layout, please update to 040000.")
}

interface LayoutBuilder {
    readonly Led: gridui.builder.Led
    readonly SetColor: gridui.builder.Slider
    readonly Text2: gridui.builder.Text
    readonly Text: gridui.builder.Text
}

interface Layout {
    readonly Led: gridui.widget.Led
    readonly SetColor: gridui.widget.Slider
    readonly Text2: gridui.widget.Text
    readonly Text: gridui.widget.Text

    begin(ownerName: string, deviceName: string, builderCallback?: (layoutBuilder: LayoutBuilder) => void): void

    changeTab(index: number): void
    log(message: string): void
}

const layout = {
    begin(ownerName: string, deviceName: string, builderCallback?: (layoutBuilder: LayoutBuilder) => void) {
        gridui.begin(ownerName, deviceName, (builder) => {
            const layoutBuilder: LayoutBuilder = {
                Led: builder.led(1.5, 0, 9.5, 8.5, 63201),
                SetColor: builder.slider(1, 12.5, 10, 1.5, 22969)
                    .max(360)
                    .showValue(false),
                Text2: builder.text(4, 12, 4, 1, 45250)
                    .text("Barva")
                    .fontSize(17),
                Text: builder.text(3.5, 9, 5, 2, 19354)
                    .text("")
                    .fontSize(16)
            }

            if(builderCallback !== undefined) {
                builderCallback(layoutBuilder)
            }

            for(const key in layoutBuilder) {
                layout[key] = layoutBuilder[key].finish()
                layoutBuilder[key] = undefined
            }
        })
    },
    changeTab: gridui.changeTab,
    log: gridui.log,
} as Layout

export default layout
